name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      vault:
        image: hashicorp/vault:latest
        env:
          VAULT_DEV_ROOT_TOKEN_ID: dev-token
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        ports:
          - 8200:8200
        options: >-
          --cap-add=IPC_LOCK

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Wait for Vault
      run: |
        timeout 60s bash -c '
        until curl -sf http://localhost:8200/v1/sys/health; do
          echo "Waiting for Vault..."
          sleep 5
        done'
      env:
        VAULT_ADDR: http://localhost:8200
        VAULT_TOKEN: dev-token

    - name: Install Vault CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg lsb-release
        wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt-get update && sudo apt-get install -y vault

    - name: Setup Vault Keys
      run: |
        chmod +x scripts/setup-vault-keys.sh
        ./scripts/setup-vault-keys.sh
      env:
        VAULT_ADDR: http://localhost:8200
        VAULT_TOKEN: dev-token

    - name: Run tests
      run: |
        # Run all tests including examples to ensure they compile
        go test -v -race ./...
        # Run coverage only on pkg directory
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./pkg/...
      env:
        VAULT_ADDR: 'http://localhost:8200'
        VAULT_TOKEN: 'dev-token'

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  release:
    name: Release
    needs: [test, lint]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
